// Fibonacci test program. Adapted from CSE 469 (uw seattle) `test12_Fibonacci.arm`


// Requires:
// Expected results:
// X31  = 6 (N)
// X6  = 8 (Result of Fibonacci function with N = 6)
// X2 = 4
// X1 = 196

00000000011000000000111110010011    //0      // ADDI X31, X0, 6           // X31 = N = 6
00000000000000000000001100010011    //4      // ADDI X6, X0, 0           // X6 = 0            // RETURN REG
00000000100000000000010100010011    //8      // ADDI X10, X0, 8         // X10 = 16          // for stack pointer decrementing with no SUBI
00000000001100000000010110010011    //12   // ADDI X11, X0, 3          // X11 = 3           // for B.LT (N < 3)
00000000000100000000011000010011    //16      // ADDI X12, X0, 1          // X12 = 1
00000000001000000000011010010011    //20      // ADDI X13, X0, 2          // X13 = 2
00000000000000000000000100010011    //24  // ADDI X2, X0, 0          // x2 = 0           // STACK POINTER
00001100010000000000000010010011    //28  // ADDI X1, X0, 196        // X30 = END = 49*4  // RETURN ADDRESS
00000000010000010000000100010011    //32  // ADDI X2, X2, 4          // Increase stack pointer by 8.
00000000000100010010000000100011    //36    // sw X1, 0(X2)         // Store current return address on stack.
11111111111100010010111000100011    //40     // sw X31, -4(X2)        // Store current N on stack.
00000010000000000000000011101111    //44        // jal x1, 32 jump to FIBONACCI (+8)
00000000000000000000000000010011    //48      // ADDI X0, X0, 0          // NOOP
11111111110000010010111110000011    //52     // Lw X31, -4(X2)        // Retrieve N from stack.
00000000000000000000000000010011    //56      // ADDI X0, X0, 0          // NOOP
00000000000000010010000010000011    //60     // lw X1, 0(X2)        // Retrieve return address from stack.
00000000000000000000000000010011    //64      // ADDI X0, X0, 0          // NOOP
00000000000000001000000001100111    //68     // jalr x0, X1, 0  // return
00000000000000000000000000010011    //72      // ADDI X0, X0, 0          // NOOP
               //FIBONACCI(N):
00000000000000000000000000010011    //76     // addi x0, x0, 0          // X31 = X0 - X11
00000110101111111100010001100011    //80       // blt x31, x11, 104
00000000000000000000000000010011    //84      // ADDI X0, X0, 0          // NOOP
               //FIBONACCI(N-2):
00000000100000010000000100010011    //88      // ADDI X2, X2, 8         // Increase stack pointer by 16.
00000000000100010010000000100011    //92     // Sw X1, 0(X2)        // Store current return address on stack.
11111111111100010010111000100011    //96     // Sw X31, -4(X2)        // Store current N on stack.
01000000110111111000111110110011    //100     // SUB X31, X31, X13           // X0 = X0 - X13
11111110010111111111000011101111    //104        // jal x1, -28
00000000000000000000000000010011    //108      // ADDI X0, X0, 0          // NOOP
11111111110000010010111110000011    //112    // Lw X31, -4(X2)        // Retrieve N from stack.
00000000000000000000000000010011    //116      // ADDI X0, X0, 0          // NOOP
00000000000000010010000010000011    //120     // Lw X1, 0(X2)        // Retrieve return address from stack.
00000000000000000000000000010011    //124      // ADDI X0, X0, 0          // NOOP
01000000101000010000000100110011    //128     // SUB X2, X2, X10         // Decrease stack pointer by 16.
               //FIBONACCI(N-1):
00000000100000010000000100010011    //132      // ADDI X2, X2, 8        // Increase stack pointer by 16.
00000000000100010010000000100011    //136     // Sw X1, (X2)        // Store current return address on stack.
11111111111100010010111000100011    //140      // Sw X31, -4(X2)        // Store current N on stack.
01000000110011111000111110110011    //144     // SUB X31, X31, X12           // X0 = X0 - X12
11111011100111111111000011101111    //148        // jal x1, -72        //BL to FIBONACCI (-18)
00000000000000000000000000010011    //152      // ADDI X0, X0, 0          // NOOP
11111111110000010010111110000011    //156     // Lw X31, -4(X2)        // Retrieve N from stack.
00000000000000000000000000010011    //160     // ADDI X0, X0, 0          // NOOP
00000000000000010010000010000011    //164     // Lw x1, 0(X2)        // Retrieve return address from stack.
00000000000000000000000000010011    //168      // ADDI X0, X0, 0          // NOOP
01000000101000010000000100110011    //172     // SUB X2, X2, X10         // Decrease stack pointer by 16.
00000000000000001000000001100111    //176     // jalr x0, x1, 0      //BR X30 (RETURN)
00000000000000000000000000010011    //180      // ADDI X0, X0, 0          // NOOP
               //RESULT:
00000000000100110000001100010011    //184      // ADDI X6, X6, 1            // X1 += 1
00000000000000001000000001100111    //188      // jalr x0, x1, 0
00000000000000000000000000010011    //192      // ADDI X0, X0, 0          // NOOP
               //END:
00000000000000000000000001101111    //196       // jal x0, 0
